/* The following code was generated by JFlex 1.2.2 on 25/01/23 14:24 */

/*
 * $Header: /cvsroot/remotetea/remotetea/src/org/acplt/oncrpc/apps/jrpcgen/JrpcgenScanner.flex,v 1.1.1.1 2003/08/13 12:03:47 haraldalbrecht Exp $
 *
 * Copyright (c) 1999, 2000
 * Lehrstuhl fuer Prozessleittechnik (PLT), RWTH Aachen
 * D-52064 Aachen, Germany.
 * All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Library General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this program (see the file COPYING.LIB for more
 * details); if not, write to the Free Software Foundation, Inc.,
 * 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * To compile into java code use:
 *   java -jar <whereever/>JFlex.jar JrpcgenScanner.flex
 */

package org.acplt.oncrpc.apps.jrpcgen;
import org.acplt.oncrpc.apps.jrpcgen.cup_runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 25/01/23 14:24 from the specification file
 * <tt>file:/home/rpspilsbury/xdr/oncrpc4j-oncrpc4j-3.1.0/oncrpc4j-rpcgen/src/main/java/org/acplt/oncrpc/apps/jrpcgen/JrpcgenScanner.flex</tt>
 */
class JrpcgenScanner implements org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Scanner {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\4\0\1\6"+
    "\2\0\1\65\1\66\1\5\1\10\1\62\1\16\1\0\1\4\1\12"+
    "\7\15\2\11\1\63\1\61\1\73\1\64\1\74\2\0\1\36\3\14"+
    "\1\41\1\14\1\35\1\7\1\43\3\7\1\37\1\44\1\34\1\32"+
    "\1\7\1\33\1\42\2\7\1\40\4\7\1\71\1\0\1\72\1\0"+
    "\1\56\1\0\1\23\1\57\1\45\1\50\1\26\1\51\1\22\1\53"+
    "\1\30\2\7\1\55\1\24\1\31\1\21\1\17\1\60\1\20\1\27"+
    "\1\46\1\54\1\25\1\52\1\13\1\47\1\7\1\67\1\0\1\70"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    61,   122,    61,   183,    61,   244,   305,   366,   427, 
      488,   549,   610,   671,   732,   793,   854,   915,   976,  1037, 
     1098,  1159,  1220,  1281,  1342,  1403,  1464,  1525,    61,    61, 
       61,    61,    61,    61,    61,    61,    61,    61,    61,    61, 
      244,  1586,   244,  1647,  1708,  1769,  1830,  1891,  1952,  2013, 
     2074,  2135,  2196,  2257,  2318,  2379,  2440,  2501,  2562,  2623, 
     2684,  2745,  2806,  2867,  2928,  2989,  3050,  3111,  3172,  3233, 
     1708,  3294,  3355,  3416,  3477,  3538,  3599,  3660,  3721,   305, 
     3782,  3843,  3904,  3965,  4026,  4087,  4148,  4209,  4270,  4331, 
     4392,  4453,  4514,  4575,  4636,  4697,  4758,  4819,   305,  4880, 
      305,  4941,  5002,  5063,  5124,  5185,  5246,  5307,   305,   305, 
     5368,  5429,  5490,  5551,  5612,  5673,  5734,   305,  5795,  5856, 
     5917,  5978,  6039,  6100,  6161,  6222,   305,  6283,  6344,   305, 
     6405,  6466,  6527,   305,   305,  6588,   305,  6649,  6710,  6771, 
      305,  6832,   305,   305,   305,  6893,  6954,  7015,   305,  7076, 
     7137,   305,  7198,   305,   305,   305,   305,  7259,  7320,   305, 
     7381,   305
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\2\10\1\11\1\13\1\14\1\10\1\15"+
    "\3\10\1\16\1\17\1\20\1\21\1\10\1\22\5\10"+
    "\1\23\4\10\1\24\1\25\1\10\1\26\1\27\1\10"+
    "\1\30\1\31\1\32\1\10\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\77\0\1\4\76\0\1\51\1\52\67\0"+
    "\1\51\1\53\1\4\72\51\7\0\7\10\1\0\42\10"+
    "\25\0\2\11\2\0\1\11\71\0\1\54\1\55\1\0"+
    "\1\54\70\0\1\11\3\0\1\11\66\0\7\10\1\0"+
    "\1\10\1\56\40\10\23\0\7\10\1\0\1\57\41\10"+
    "\23\0\7\10\1\0\2\10\1\60\4\10\1\61\32\10"+
    "\23\0\7\10\1\0\12\10\1\62\27\10\23\0\7\10"+
    "\1\0\27\10\1\63\3\10\1\64\1\65\5\10\23\0"+
    "\7\10\1\0\12\10\1\66\27\10\23\0\7\10\1\0"+
    "\14\10\1\67\25\10\23\0\7\10\1\0\22\10\1\70"+
    "\17\10\23\0\7\10\1\0\2\10\1\71\1\10\1\72"+
    "\27\10\1\73\5\10\23\0\7\10\1\0\30\10\1\74"+
    "\11\10\23\0\7\10\1\0\2\10\1\75\4\10\1\76"+
    "\32\10\23\0\7\10\1\0\36\10\1\77\3\10\23\0"+
    "\7\10\1\0\30\10\1\100\11\10\23\0\7\10\1\0"+
    "\12\10\1\101\24\10\1\102\2\10\23\0\7\10\1\0"+
    "\2\10\1\103\37\10\23\0\7\10\1\0\2\10\1\104"+
    "\37\10\23\0\7\10\1\0\35\10\1\105\4\10\14\0"+
    "\5\52\1\106\67\52\12\0\1\54\2\0\1\54\70\0"+
    "\2\107\1\0\2\107\5\0\1\107\2\0\1\107\7\0"+
    "\1\107\2\0\1\107\3\0\1\107\2\0\2\107\5\0"+
    "\1\107\24\0\7\10\1\0\2\10\1\110\37\10\23\0"+
    "\7\10\1\0\4\10\1\111\35\10\23\0\7\10\1\0"+
    "\11\10\1\112\30\10\23\0\7\10\1\0\1\10\1\113"+
    "\40\10\23\0\7\10\1\0\35\10\1\114\4\10\23\0"+
    "\7\10\1\0\1\10\1\115\40\10\23\0\7\10\1\0"+
    "\11\10\1\116\30\10\23\0\7\10\1\0\2\10\1\117"+
    "\37\10\23\0\7\10\1\0\27\10\1\120\12\10\23\0"+
    "\7\10\1\0\15\10\1\121\24\10\23\0\7\10\1\0"+
    "\14\10\1\122\25\10\23\0\7\10\1\0\12\10\1\123"+
    "\27\10\23\0\7\10\1\0\10\10\1\124\31\10\23\0"+
    "\7\10\1\0\4\10\1\125\35\10\23\0\7\10\1\0"+
    "\1\126\41\10\23\0\7\10\1\0\35\10\1\127\4\10"+
    "\23\0\7\10\1\0\32\10\1\130\7\10\23\0\7\10"+
    "\1\0\2\10\1\131\37\10\23\0\7\10\1\0\1\132"+
    "\41\10\23\0\7\10\1\0\10\10\1\133\1\134\30\10"+
    "\23\0\7\10\1\0\10\10\1\135\1\21\24\10\1\32"+
    "\3\10\23\0\7\10\1\0\12\10\1\136\27\10\23\0"+
    "\7\10\1\0\2\10\1\137\37\10\23\0\7\10\1\0"+
    "\4\10\1\140\35\10\14\0\4\52\1\4\1\106\67\52"+
    "\7\0\7\10\1\0\3\10\1\141\36\10\23\0\7\10"+
    "\1\0\41\10\1\142\23\0\7\10\1\0\31\10\1\143"+
    "\10\10\23\0\7\10\1\0\10\10\1\144\31\10\23\0"+
    "\7\10\1\0\5\10\1\145\34\10\23\0\7\10\1\0"+
    "\11\10\1\146\23\10\1\147\4\10\23\0\7\10\1\0"+
    "\27\10\1\150\12\10\23\0\7\10\1\0\1\10\1\151"+
    "\40\10\23\0\7\10\1\0\16\10\1\152\23\10\23\0"+
    "\7\10\1\0\23\10\1\153\16\10\23\0\7\10\1\0"+
    "\10\10\1\154\31\10\23\0\7\10\1\0\7\10\1\155"+
    "\32\10\23\0\7\10\1\0\1\10\1\156\40\10\23\0"+
    "\7\10\1\0\7\10\1\157\32\10\23\0\7\10\1\0"+
    "\40\10\1\160\1\10\23\0\7\10\1\0\4\10\1\161"+
    "\35\10\23\0\7\10\1\0\4\10\1\162\35\10\23\0"+
    "\7\10\1\0\7\10\1\163\32\10\23\0\7\10\1\0"+
    "\11\10\1\164\30\10\23\0\7\10\1\0\2\10\1\165"+
    "\37\10\23\0\7\10\1\0\34\10\1\65\5\10\23\0"+
    "\7\10\1\0\3\10\1\166\36\10\23\0\7\10\1\0"+
    "\36\10\1\167\3\10\23\0\7\10\1\0\31\10\1\170"+
    "\10\10\23\0\7\10\1\0\1\10\1\171\40\10\23\0"+
    "\7\10\1\0\35\10\1\172\4\10\23\0\7\10\1\0"+
    "\11\10\1\173\30\10\23\0\7\10\1\0\12\10\1\174"+
    "\27\10\23\0\7\10\1\0\26\10\1\175\13\10\23\0"+
    "\7\10\1\0\26\10\1\176\13\10\23\0\7\10\1\0"+
    "\27\10\1\177\12\10\23\0\7\10\1\0\14\10\1\200"+
    "\25\10\23\0\7\10\1\0\24\10\1\201\15\10\23\0"+
    "\7\10\1\0\27\10\1\202\12\10\23\0\7\10\1\0"+
    "\31\10\1\203\10\10\23\0\7\10\1\0\36\10\1\204"+
    "\3\10\23\0\7\10\1\0\35\10\1\205\4\10\23\0"+
    "\7\10\1\0\27\10\1\206\12\10\23\0\7\10\1\0"+
    "\1\10\1\207\40\10\23\0\7\10\1\0\3\10\1\210"+
    "\36\10\23\0\7\10\1\0\12\10\1\211\27\10\23\0"+
    "\7\10\1\0\37\10\1\212\2\10\23\0\7\10\1\0"+
    "\1\10\1\213\40\10\23\0\7\10\1\0\4\10\1\214"+
    "\35\10\23\0\7\10\1\0\7\10\1\215\32\10\23\0"+
    "\7\10\1\0\2\10\1\216\37\10\23\0\7\10\1\0"+
    "\3\10\1\217\36\10\23\0\7\10\1\0\27\10\1\220"+
    "\12\10\23\0\7\10\1\0\34\10\1\221\5\10\23\0"+
    "\7\10\1\0\17\10\1\222\22\10\23\0\7\10\1\0"+
    "\15\10\1\223\24\10\23\0\7\10\1\0\7\10\1\224"+
    "\32\10\23\0\7\10\1\0\7\10\1\225\32\10\23\0"+
    "\7\10\1\0\36\10\1\226\3\10\23\0\7\10\1\0"+
    "\12\10\1\227\27\10\23\0\7\10\1\0\27\10\1\230"+
    "\12\10\23\0\7\10\1\0\35\10\1\231\4\10\23\0"+
    "\7\10\1\0\5\10\1\232\34\10\23\0\7\10\1\0"+
    "\12\10\1\233\27\10\23\0\7\10\1\0\20\10\1\232"+
    "\21\10\23\0\7\10\1\0\25\10\1\233\14\10\23\0"+
    "\7\10\1\0\32\10\1\234\7\10\23\0\7\10\1\0"+
    "\27\10\1\235\12\10\23\0\7\10\1\0\7\10\1\236"+
    "\32\10\23\0\7\10\1\0\1\237\41\10\23\0\7\10"+
    "\1\0\31\10\1\240\10\10\23\0\7\10\1\0\36\10"+
    "\1\241\3\10\23\0\7\10\1\0\7\10\1\242\32\10"+
    "\14\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /* assumes correct representation of a long value for
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int  max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit  = Character.digit(yy_buffer[i],radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JrpcgenScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JrpcgenScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[7442];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1554) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      System.out.println(YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      System.out.println(YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }

    System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_counted = false;
          yycolumn++;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 161: 
          {  return symbol(JrpcgenSymbols.QUADRUPLE);  }
        case 163: break;
        case 159: 
          {  return symbol(JrpcgenSymbols.UNSIGNED);  }
        case 164: break;
        case 156: 
          {  return symbol(JrpcgenSymbols.DEFAULT);  }
        case 165: break;
        case 155: 
          {  return symbol(JrpcgenSymbols.TYPEDEF);  }
        case 166: break;
        case 154: 
          {  return symbol(JrpcgenSymbols.VERSION);  }
        case 167: break;
        case 39: 
          {  return symbol(JrpcgenSymbols.RANGLE);  }
        case 168: break;
        case 38: 
          {  return symbol(JrpcgenSymbols.LANGLE);  }
        case 169: break;
        case 37: 
          {  return symbol(JrpcgenSymbols.RBRACKET);  }
        case 170: break;
        case 36: 
          {  return symbol(JrpcgenSymbols.LBRACKET);  }
        case 171: break;
        case 35: 
          {  return symbol(JrpcgenSymbols.RBRACE);  }
        case 172: break;
        case 34: 
          {  return symbol(JrpcgenSymbols.LBRACE);  }
        case 173: break;
        case 33: 
          {  return symbol(JrpcgenSymbols.RPAREN);  }
        case 174: break;
        case 32: 
          {  return symbol(JrpcgenSymbols.LPAREN);  }
        case 175: break;
        case 31: 
          {  return symbol(JrpcgenSymbols.EQUAL);  }
        case 176: break;
        case 1: 
        case 4: 
        case 6: 
        case 10: 
          {  throw new Error("Illegal character \"" + yytext() + "\"");  }
        case 177: break;
        case 2: 
        case 3: 
        case 42: 
          {  /* ignore */  }
        case 178: break;
        case 5: 
          {  return symbol(JrpcgenSymbols.STAR);  }
        case 179: break;
        case 28: 
          {  return symbol(JrpcgenSymbols.SEMICOLON);  }
        case 180: break;
        case 29: 
          {  return symbol(JrpcgenSymbols.COMMA);  }
        case 181: break;
        case 30: 
          {  return symbol(JrpcgenSymbols.COLON);  }
        case 182: break;
        case 79: 
          {  return symbol(JrpcgenSymbols.INT);  }
        case 183: break;
        case 98: 
          {  return symbol(JrpcgenSymbols.VOID);  }
        case 184: break;
        case 100: 
          {  return symbol(JrpcgenSymbols.ENUM);  }
        case 185: break;
        case 108: 
          {  return symbol(JrpcgenSymbols.CASE);  }
        case 186: break;
        case 109: 
          {  return symbol(JrpcgenSymbols.CHAR);  }
        case 187: break;
        case 117: 
          {  return symbol(JrpcgenSymbols.LONG);  }
        case 188: break;
        case 118: 
        case 151: 
          {  return symbol(JrpcgenSymbols.BOOL);  }
        case 189: break;
        case 126: 
          {  return symbol(JrpcgenSymbols.SHORT);  }
        case 190: break;
        case 129: 
          {  return symbol(JrpcgenSymbols.CONST);  }
        case 191: break;
        case 133: 
          {  return symbol(JrpcgenSymbols.FLOAT);  }
        case 192: break;
        case 134: 
          {  return symbol(JrpcgenSymbols.HYPER);  }
        case 193: break;
        case 136: 
          {  return symbol(JrpcgenSymbols.UNION);  }
        case 194: break;
        case 140: 
          {  return symbol(JrpcgenSymbols.OPAQUE);  }
        case 195: break;
        case 142: 
          {  return symbol(JrpcgenSymbols.STRING);  }
        case 196: break;
        case 143: 
          {  return symbol(JrpcgenSymbols.STRUCT);  }
        case 197: break;
        case 144: 
          {  return symbol(JrpcgenSymbols.SWITCH);  }
        case 198: break;
        case 148: 
          {  return symbol(JrpcgenSymbols.DOUBLE);  }
        case 199: break;
        case 153: 
          {  return symbol(JrpcgenSymbols.PROGRAM);  }
        case 200: break;
        case 7: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 99: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 127: 
        case 128: 
        case 130: 
        case 131: 
        case 132: 
        case 135: 
        case 137: 
        case 138: 
        case 139: 
        case 141: 
        case 145: 
        case 146: 
        case 147: 
        case 149: 
        case 150: 
        case 152: 
        case 157: 
        case 158: 
        case 160: 
          { 
        return symbol(JrpcgenSymbols.IDENTIFIER, yytext());
     }
        case 201: break;
        case 8: 
        case 9: 
        case 43: 
        case 70: 
          { 
        return symbol(JrpcgenSymbols.INTEGER_LITERAL, yytext());
     }
        case 202: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return new Symbol(JrpcgenSymbols.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
